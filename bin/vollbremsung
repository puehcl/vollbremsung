#!/usr/bin/env ruby
# -*- encoding : utf-8 -*-

require 'mkmf' # part of stdlib
require 'open3'
require 'json'
require 'optparse'
require 'handbrake'
require 'vollbremsung'

def log(msg)
  puts Time.new.strftime("%Y-%m-%d %H:%M:%S") +  " #{msg}"
end

def ffprobe(file)
  stdout,stderr,status = Open3.capture3("ffprobe -v quiet -print_format json -show_format -show_streams \"#{file}\"")
  if status.success?
    return JSON.parse(stdout)
  else
    STDERR.puts stderr
    return nil
  end
end

options = {}

OptionParser.new do |opts|
  opts.banner = Vollbremsung::USAGE
  opts.separator ""
  opts.separator "vollbremsung is a HandbrakeCLI bulk encoding tool."
  opts.separator "If <target> is a file, it will be processed by Handbrake"
  opts.separator "using a modified version of the default preset which will"
  opts.separator "take all audio and subtitle tracks in their order of appearence"
  opts.separator "(Handbrake default takes only the first)"
  opts.separator ""
  opts.separator "If <target> is a directory, all files with one of the file"
  opts.separator "extensions [ #{Vollbremsung::CONVERT_TYPES.join(' | ')} ] will be"
  opts.separator "be processed. See the following options for additional actions."
  opts.separator ""

  opts.on("-d", "--delete", "Delete source files after successful encoding") do |flag|
    options[:delete]  = true
  end

  opts.on("--list-only", "List matching files only. Do not run processing") do |flag|
    options[:list_only]  = true
  end

  opts.on("-m", "--move", "Move source files to <FILENAME>.old after encoding") do |flag|
    options[:move] = true
  end

  opts.on("-r", "--recursive", "Process subdirectories recursively as well") do |flag|
    options[:recursive] = true
  end

  opts.on("-t", "--title", "Set the MP4 metadata title tag to the filename") do |flag|
    options[:title] = true
  end
  
  opts.on("--x264-preset [PRESET]", "Set the x264-preset. Default is: #{Vollbremsung::X264_DEFAULT_PRESET}") do |preset|
    options[:x264_preset] = preset
  end
  
  opts.on("--version", "Show program version information") do
    options[:version]  = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse! # do the parsing. do it now!


if options[:version]
  puts "vollbremsung version #{Vollbremsung::VERSION}"
  exit
end


options[:x264_preset] = Vollbremsung::X264_DEFAULT_PRESET if options[:x264_preset].nil?


if ARGV[0].nil? 
  puts "No target provided."
  puts Vollbremsung::USAGE
  exit 1
end

TARGET_PATH = ARGV[0]

unless File.exists?(TARGET_PATH)
  puts "The target path you provided does not exists."
  exit 1
end

if options[:move] && options[:delete]
  puts "--delete (-d) and --move (-m) are mutually exclusive - choose one!"
  puts "It is not possible to delete and move the source files at the same time."
  exit 1
end

# probe for required executable
# only do this if not in list-only mode
unless options[:list_only]
  unless find_executable('HandbrakeCLI') || find_executable('HandBrakeCLI')
    puts "It seems you do not have HandbrakeCLI installed or it is not available in your $PATH."
    puts "You can get the executable from http://handbrake.fr/downloads.php"
    exit 1
  end

  unless find_executable 'ffprobe'
    puts "It seems you do not have ffprobe installed or it is not available in your $PATH."
    puts "ffprobe is part of ffmpeg. Install it for your system and run again."
    exit 1
  end
end


File.delete 'mkmf.log' rescue nil# find_executable seems to create such file in case executable is not found

#HANDBRAKE_OPTIONS = "--encoder x264 --quality 20.0 --aencode faac -B 160 --mixdown dpl2 --arate Auto -D 0.0 --format mp4 --markers --audio-copy-mask aac,ac3,dtshd,dts,mp3 --audio-fallback ffac3 --x264-preset veryfast --loose-anamorphic --modulus 2"

log "probing for target files..."
target_files = []
log "Files found:"
if File.directory?(TARGET_PATH)
  
  scope = options[:recursive] ? "/**/*" : "/*"
  
  Dir[File.absolute_path(TARGET_PATH) + scope].sort.each do |file|
    unless File.directory?(file)
      if Vollbremsung::CONVERT_TYPES.include?(File.extname(file).downcase[1..-1]) 
        puts "* " + File.absolute_path(file)[File.absolute_path(TARGET_PATH).length+1..-1] 
        target_files << file 
      end
    end
  end
  
else
  puts "* " + TARGET_PATH
  target_files << File.absolute_path(TARGET_PATH)
end

exit if options[:list_only]

target_files.each do |infile|
  
  metadata = ffprobe(infile)
  if metadata.nil?
    log "ERROR retrieving metadata -- skipping this file"
    next
  end

  astreams = Vollbremsung::StreamDescr.new
  sstreams = Vollbremsung::StreamDescr.new
  
  metadata['streams'].each do |stream|
    case stream['codec_type']
    when 'audio'  
      astreams.count += 1
      astreams.names << stream['tags']['title'] unless stream['tags'].nil? || stream['tags']['title'].nil?
    when 'subtitle' 
      sstreams.count += 1
      sstreams.names << stream['tags']['title'] unless stream['tags'].nil? || stream['tags']['title'].nil?
    else 
      # this is attachment stuff, like typefonts --> ignore
    end
  end

  
  infile_basename = File.basename(infile)
  infile_basename_noext = File.basename(infile, File.extname(infile)) # without ext
  infile_dirname = File.dirname(infile)
  infile_path_noext = File.join(infile_dirname, infile_basename_noext)
  infile_relative_path = #File.directory?(TARGET_PATH) ? infile[TARGET_PATH.length+1..-1] : File.basename(TARGET_PATH)
    if File.directory?(TARGET_PATH)
      File.absolute_path(infile)[File.absolute_path(TARGET_PATH).length+1..-1] 
    else
      File.basename(TARGET_PATH)
    end

  outfile = "#{infile_path_noext}.m4v"
  
  log "processing: #{infile_relative_path}" 

  #%x( #{HANDBRAKE_CLI} #{HANDBRAKE_OPTIONS} --audio #{(1..astreams.count).to_a.join(',')} --aname #{astreams.names.join(',')} --subtitle #{(1..sstreams.count).to_a.join(',')} -i \"#{infile}\" -o \"#{outfile}\" 2>&1 )
  
  success = false
  begin
    HandBrake::CLI.new.input(infile).encoder('x264').quality('20.0').aencoder('faac').
    ab('160').mixdown('dpl2').arate('Auto').drc('0.0').format('mp4').markers.
    audio_copy_mask('aac').audio_fallback('ffac3').x264_preset(options[:x264_preset]).
    loose_anamorphic.modulus('2').audio((1..astreams.count).to_a.join(',')).aname(astreams.names.join(',')).
    subtitle((1..sstreams.count).to_a.join(',')).output(outfile)
    
    # if we make it here, encoding went well
    log "SUCCESS: encoding done"
    success = true
  rescue 
    log "ERROR: Handbrake exited with an error"
  end # HandBrake::CLI
    
  if success
    infile_size = File.size(infile)
    outfile_size = File.size(outfile)

    log "compression ratio: %.2f" % (outfile_size.to_f / infile_size.to_f)
      
    if options[:title]
      log "setting MP4 title"
    
      infile_noext = File.join( File.dirname(infile), File.basename(infile,File.extname(infile)))
      tmpfile = infile_noext + ".tmp.mp4"
    
      %x( ffmpeg -i \"#{outfile}\" -metadata title=\"#{infile_basename_noext}\" #{Vollbremsung::FFMPEG_OPTIONS} \"#{tmpfile}\" 2>&1 )
    
      if $?.exitstatus == 0
        begin
          File.delete outfile
          File.rename tmpfile, outfile 
        rescue
          log "ERROR: moving #{tmpfile} to #{outfile}"
        end
      else
        log "ERROR: MP4 title could not be changed"
      end
    end # if options[:title]
    
    if options[:move]
      log "moving source file to *.old"
      File.rename(infile, "#{infile}.old") rescue log "ERROR: renaming source file"
    elsif options[:delete]
      log "deleting source file"
      File.delete(infile) rescue log "ERROR: deleting source file"
    end
    
  end # if success
end # target_files.each

if target_files.empty?
  log "nothing to do"
else
  log "all items processed"
end
